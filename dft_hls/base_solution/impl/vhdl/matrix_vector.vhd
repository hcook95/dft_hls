-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    M_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    M_ce0 : OUT STD_LOGIC;
    M_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_In_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_In_ce0 : OUT STD_LOGIC;
    V_In_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_Out_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    V_Out_ce0 : OUT STD_LOGIC;
    V_Out_we0 : OUT STD_LOGIC;
    V_Out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_vector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_vector_matrix_vector,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.536000,HLS_SYN_LAT=785,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=621,HLS_SYN_LUT=1201,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln8_fu_124_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln8_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln8_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln8_reg_213 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_138_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_reg_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln12_fu_152_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln12_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln12_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal V_In_load_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal M_load_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_reg_87 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_1_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_120_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln14_fu_134_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln14_fu_163_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_202_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_vector_facc_32ns_32ns_1ns_32_6_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U1 : component matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_120_p0,
        din1 => grp_fu_120_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    facc_32ns_32ns_1ns_32_6_no_dsp_1_U2 : component matrix_vector_facc_32ns_32ns_1ns_32_6_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => mul_reg_269,
        in_last => icmp_ln14_reg_244,
        in_valid => grp_fu_202_in_valid,
        out_data => grp_fu_202_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_87 <= ap_const_lv4_0;
            elsif (((icmp_ln12_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_87 <= add_ln8_reg_208;
            end if; 
        end if;
    end process;

    j_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_146_p2 = ap_const_lv1_0))) then 
                j_reg_98 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_reg_98 <= add_ln12_reg_226;
            end if; 
        end if;
    end process;

    sum_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_146_p2 = ap_const_lv1_0))) then 
                sum_reg_109 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_reg_109 <= grp_fu_202_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                M_load_reg_254 <= M_q0;
                V_In_load_reg_249 <= V_In_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln12_reg_226 <= add_ln12_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_208 <= add_ln8_fu_124_p2;
                    tmp_cast_reg_218(5 downto 3) <= tmp_cast_fu_138_p3(5 downto 3);
                    zext_ln8_reg_213(3 downto 0) <= zext_ln8_fu_130_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln14_reg_244 <= icmp_ln14_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_reg_269 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    zext_ln8_reg_213(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_cast_reg_218(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln12_fu_177_p2, icmp_ln8_fu_146_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_146_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    M_address0 <= zext_ln14_1_fu_172_p1(6 - 1 downto 0);

    M_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_In_address0 <= zext_ln12_fu_158_p1(3 - 1 downto 0);

    V_In_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_In_ce0 <= ap_const_logic_1;
        else 
            V_In_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_address0 <= zext_ln8_reg_213(3 - 1 downto 0);

    V_Out_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_Out_ce0 <= ap_const_logic_1;
        else 
            V_Out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_Out_d0 <= sum_reg_109;

    V_Out_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_177_p2)
    begin
        if (((icmp_ln12_fu_177_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            V_Out_we0 <= ap_const_logic_1;
        else 
            V_Out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_fu_152_p2 <= std_logic_vector(unsigned(j_reg_98) + unsigned(ap_const_lv4_1));
    add_ln14_fu_167_p2 <= std_logic_vector(unsigned(tmp_cast_reg_218) + unsigned(zext_ln14_fu_163_p1));
    add_ln8_fu_124_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_146_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_146_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_146_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_146_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_120_p0 <= V_In_load_reg_249;
    grp_fu_120_p1 <= M_load_reg_254;

    grp_fu_202_in_valid_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_202_in_valid <= ap_const_logic_1;
        else 
            grp_fu_202_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_177_p2 <= "1" when (j_reg_98 = ap_const_lv4_8) else "0";
    icmp_ln14_fu_183_p2 <= "1" when (add_ln12_fu_152_p2 = ap_const_lv4_8) else "0";
    icmp_ln8_fu_146_p2 <= "1" when (i_reg_87 = ap_const_lv4_8) else "0";
    tmp_cast_fu_138_p3 <= (trunc_ln14_fu_134_p1 & ap_const_lv3_0);
    trunc_ln14_fu_134_p1 <= i_reg_87(3 - 1 downto 0);
    zext_ln12_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_98),64));
    zext_ln14_1_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_167_p2),64));
    zext_ln14_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_98),6));
    zext_ln8_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_87),64));
end behav;
