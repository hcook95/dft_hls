// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector_matrix_vector,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.536000,HLS_SYN_LAT=785,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=621,HLS_SYN_LUT=1201,HLS_VERSION=2020_2}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_address0,
        M_ce0,
        M_q0,
        V_In_address0,
        V_In_ce0,
        V_In_q0,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [2:0] V_In_address0;
output   V_In_ce0;
input  [31:0] V_In_q0;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_ce0;
reg V_In_ce0;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln8_fu_124_p2;
reg   [3:0] add_ln8_reg_208;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln8_fu_130_p1;
reg   [63:0] zext_ln8_reg_213;
wire   [5:0] tmp_cast_fu_138_p3;
reg   [5:0] tmp_cast_reg_218;
wire   [3:0] add_ln12_fu_152_p2;
reg   [3:0] add_ln12_reg_226;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln12_fu_177_p2;
wire   [0:0] icmp_ln14_fu_183_p2;
reg   [0:0] icmp_ln14_reg_244;
reg   [31:0] V_In_load_reg_249;
wire    ap_CS_fsm_state4;
reg   [31:0] M_load_reg_254;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_120_p2;
reg   [31:0] mul_reg_269;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_202_p3;
wire    ap_CS_fsm_state14;
reg   [3:0] i_reg_87;
reg   [3:0] j_reg_98;
wire   [0:0] icmp_ln8_fu_146_p2;
reg   [31:0] sum_reg_109;
wire   [63:0] zext_ln14_1_fu_172_p1;
wire   [63:0] zext_ln12_fu_158_p1;
wire   [31:0] grp_fu_120_p0;
wire   [31:0] grp_fu_120_p1;
wire   [2:0] trunc_ln14_fu_134_p1;
wire   [5:0] zext_ln14_fu_163_p1;
wire   [5:0] add_ln14_fu_167_p2;
wire    ap_CS_fsm_state9;
reg    grp_fu_202_in_valid;
reg   [13:0] ap_NS_fsm;
wire   [31:0] grp_fu_202_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

matrix_vector_facc_32ns_32ns_1ns_32_6_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(mul_reg_269),
    .in_last(icmp_ln14_reg_244),
    .in_valid(grp_fu_202_in_valid),
    .out_data(grp_fu_202_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_87 <= 4'd0;
    end else if (((icmp_ln12_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_87 <= add_ln8_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_146_p2 == 1'd0))) begin
        j_reg_98 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_98 <= add_ln12_reg_226;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_146_p2 == 1'd0))) begin
        sum_reg_109 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_reg_109 <= grp_fu_202_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        M_load_reg_254 <= M_q0;
        V_In_load_reg_249 <= V_In_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln12_reg_226 <= add_ln12_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_208 <= add_ln8_fu_124_p2;
        tmp_cast_reg_218[5 : 3] <= tmp_cast_fu_138_p3[5 : 3];
        zext_ln8_reg_213[3 : 0] <= zext_ln8_fu_130_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln14_reg_244 <= icmp_ln14_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_reg_269 <= grp_fu_120_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_In_ce0 = 1'b1;
    end else begin
        V_In_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_146_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_146_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_202_in_valid = 1'b1;
    end else begin
        grp_fu_202_in_valid = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_146_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_address0 = zext_ln14_1_fu_172_p1;

assign V_In_address0 = zext_ln12_fu_158_p1;

assign V_Out_address0 = zext_ln8_reg_213;

assign V_Out_d0 = sum_reg_109;

assign add_ln12_fu_152_p2 = (j_reg_98 + 4'd1);

assign add_ln14_fu_167_p2 = (tmp_cast_reg_218 + zext_ln14_fu_163_p1);

assign add_ln8_fu_124_p2 = (i_reg_87 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_120_p0 = V_In_load_reg_249;

assign grp_fu_120_p1 = M_load_reg_254;

assign icmp_ln12_fu_177_p2 = ((j_reg_98 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_183_p2 = ((add_ln12_fu_152_p2 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_146_p2 = ((i_reg_87 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_cast_fu_138_p3 = {{trunc_ln14_fu_134_p1}, {3'd0}};

assign trunc_ln14_fu_134_p1 = i_reg_87[2:0];

assign zext_ln12_fu_158_p1 = j_reg_98;

assign zext_ln14_1_fu_172_p1 = add_ln14_fu_167_p2;

assign zext_ln14_fu_163_p1 = j_reg_98;

assign zext_ln8_fu_130_p1 = i_reg_87;

always @ (posedge ap_clk) begin
    zext_ln8_reg_213[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_cast_reg_218[2:0] <= 3'b000;
end

endmodule //matrix_vector
