// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector_matrix_vector,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3733,HLS_SYN_LUT=5435,HLS_VERSION=2020_2}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_0_address0,
        M_0_ce0,
        M_0_q0,
        M_1_address0,
        M_1_ce0,
        M_1_q0,
        M_2_address0,
        M_2_ce0,
        M_2_q0,
        M_3_address0,
        M_3_ce0,
        M_3_q0,
        M_4_address0,
        M_4_ce0,
        M_4_q0,
        M_5_address0,
        M_5_ce0,
        M_5_q0,
        M_6_address0,
        M_6_ce0,
        M_6_q0,
        M_7_address0,
        M_7_ce0,
        M_7_q0,
        V_In_0,
        V_In_1,
        V_In_2,
        V_In_3,
        V_In_4,
        V_In_5,
        V_In_6,
        V_In_7,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state24 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] M_0_address0;
output   M_0_ce0;
input  [31:0] M_0_q0;
output  [2:0] M_1_address0;
output   M_1_ce0;
input  [31:0] M_1_q0;
output  [2:0] M_2_address0;
output   M_2_ce0;
input  [31:0] M_2_q0;
output  [2:0] M_3_address0;
output   M_3_ce0;
input  [31:0] M_3_q0;
output  [2:0] M_4_address0;
output   M_4_ce0;
input  [31:0] M_4_q0;
output  [2:0] M_5_address0;
output   M_5_ce0;
input  [31:0] M_5_q0;
output  [2:0] M_6_address0;
output   M_6_ce0;
input  [31:0] M_6_q0;
output  [2:0] M_7_address0;
output   M_7_ce0;
input  [31:0] M_7_q0;
input  [31:0] V_In_0;
input  [31:0] V_In_1;
input  [31:0] V_In_2;
input  [31:0] V_In_3;
input  [31:0] V_In_4;
input  [31:0] V_In_5;
input  [31:0] V_In_6;
input  [31:0] V_In_7;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_0_ce0;
reg M_1_ce0;
reg M_2_ce0;
reg M_3_ce0;
reg M_4_ce0;
reg M_5_ce0;
reg M_6_ce0;
reg M_7_ce0;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] i_reg_239;
wire   [31:0] empty_fu_310_p1;
reg   [31:0] empty_reg_402;
wire   [31:0] empty_6_fu_314_p1;
reg   [31:0] empty_6_reg_407;
wire   [31:0] empty_7_fu_318_p1;
reg   [31:0] empty_7_reg_412;
wire   [31:0] empty_8_fu_322_p1;
reg   [31:0] empty_8_reg_417;
wire   [31:0] empty_9_fu_326_p1;
reg   [31:0] empty_9_reg_422;
wire   [31:0] empty_10_fu_330_p1;
reg   [31:0] empty_10_reg_427;
wire   [31:0] empty_11_fu_334_p1;
reg   [31:0] empty_11_reg_432;
wire   [31:0] empty_12_fu_338_p1;
reg   [31:0] empty_12_reg_437;
wire   [3:0] add_ln9_fu_342_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln9_fu_348_p2;
reg   [0:0] icmp_ln9_reg_447;
reg   [0:0] icmp_ln9_reg_447_pp0_iter1_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter2_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter3_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter4_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter5_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter6_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter7_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter8_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter9_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter10_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter11_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter12_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter13_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter14_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter15_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter16_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter17_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter18_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter19_reg;
reg   [0:0] icmp_ln9_reg_447_pp0_iter20_reg;
wire   [63:0] zext_ln9_fu_354_p1;
reg   [63:0] zext_ln9_reg_451;
reg   [63:0] zext_ln9_reg_451_pp0_iter1_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter2_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter3_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter4_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter5_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter6_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter7_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter8_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter9_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter10_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter11_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter12_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter13_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter14_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter15_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter16_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter17_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter18_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter19_reg;
reg   [63:0] zext_ln9_reg_451_pp0_iter20_reg;
reg   [31:0] M_0_load_reg_496;
reg   [31:0] M_1_load_reg_501;
reg   [31:0] M_2_load_reg_506;
reg   [31:0] M_3_load_reg_511;
reg   [31:0] M_4_load_reg_516;
reg   [31:0] M_5_load_reg_521;
reg   [31:0] M_6_load_reg_526;
reg   [31:0] M_7_load_reg_531;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] p0_reg_576;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] p1_reg_581;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] p2_reg_586;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] p3_reg_591;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] p4_reg_596;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] p5_reg_601;
wire   [31:0] grp_fu_302_p2;
reg   [31:0] p6_reg_606;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] p7_reg_611;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] sum0_a_reg_616;
wire   [31:0] grp_fu_254_p2;
reg   [31:0] sum1_a_reg_621;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] sum2_a_reg_626;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] sum3_a_reg_631;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] sum0_b_reg_636;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] sum1_b_reg_641;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] add_reg_646;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_278_p1;
wire   [31:0] grp_fu_282_p1;
wire   [31:0] grp_fu_286_p1;
wire   [31:0] grp_fu_290_p1;
wire   [31:0] grp_fu_294_p1;
wire   [31:0] grp_fu_298_p1;
wire   [31:0] grp_fu_302_p1;
wire   [31:0] grp_fu_306_p1;
wire    ap_CS_fsm_state24;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
end

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p0_reg_576),
    .din1(p1_reg_581),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p2_reg_586),
    .din1(p3_reg_591),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p4_reg_596),
    .din1(p5_reg_601),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p6_reg_606),
    .din1(p7_reg_611),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum0_a_reg_616),
    .din1(sum1_a_reg_621),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum2_a_reg_626),
    .din1(sum3_a_reg_631),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum0_b_reg_636),
    .din1(sum1_b_reg_641),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_402),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_6_reg_407),
    .din1(grp_fu_282_p1),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_7_reg_412),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_8_reg_417),
    .din1(grp_fu_290_p1),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_9_reg_422),
    .din1(grp_fu_294_p1),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_10_reg_427),
    .din1(grp_fu_298_p1),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_11_reg_432),
    .din1(grp_fu_302_p1),
    .ce(1'b1),
    .dout(grp_fu_302_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_12_reg_437),
    .din1(grp_fu_306_p1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_239 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_348_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_239 <= add_ln9_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_447 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_0_load_reg_496 <= M_0_q0;
        M_1_load_reg_501 <= M_1_q0;
        M_2_load_reg_506 <= M_2_q0;
        M_3_load_reg_511 <= M_3_q0;
        M_4_load_reg_516 <= M_4_q0;
        M_5_load_reg_521 <= M_5_q0;
        M_6_load_reg_526 <= M_6_q0;
        M_7_load_reg_531 <= M_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_447_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_reg_646 <= grp_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_10_reg_427 <= empty_10_fu_330_p1;
        empty_11_reg_432 <= empty_11_fu_334_p1;
        empty_12_reg_437 <= empty_12_fu_338_p1;
        empty_6_reg_407 <= empty_6_fu_314_p1;
        empty_7_reg_412 <= empty_7_fu_318_p1;
        empty_8_reg_417 <= empty_8_fu_322_p1;
        empty_9_reg_422 <= empty_9_fu_326_p1;
        empty_reg_402 <= empty_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln9_reg_447 <= icmp_ln9_fu_348_p2;
        icmp_ln9_reg_447_pp0_iter1_reg <= icmp_ln9_reg_447;
        zext_ln9_reg_451_pp0_iter1_reg[3 : 0] <= zext_ln9_reg_451[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln9_reg_447_pp0_iter10_reg <= icmp_ln9_reg_447_pp0_iter9_reg;
        icmp_ln9_reg_447_pp0_iter11_reg <= icmp_ln9_reg_447_pp0_iter10_reg;
        icmp_ln9_reg_447_pp0_iter12_reg <= icmp_ln9_reg_447_pp0_iter11_reg;
        icmp_ln9_reg_447_pp0_iter13_reg <= icmp_ln9_reg_447_pp0_iter12_reg;
        icmp_ln9_reg_447_pp0_iter14_reg <= icmp_ln9_reg_447_pp0_iter13_reg;
        icmp_ln9_reg_447_pp0_iter15_reg <= icmp_ln9_reg_447_pp0_iter14_reg;
        icmp_ln9_reg_447_pp0_iter16_reg <= icmp_ln9_reg_447_pp0_iter15_reg;
        icmp_ln9_reg_447_pp0_iter17_reg <= icmp_ln9_reg_447_pp0_iter16_reg;
        icmp_ln9_reg_447_pp0_iter18_reg <= icmp_ln9_reg_447_pp0_iter17_reg;
        icmp_ln9_reg_447_pp0_iter19_reg <= icmp_ln9_reg_447_pp0_iter18_reg;
        icmp_ln9_reg_447_pp0_iter20_reg <= icmp_ln9_reg_447_pp0_iter19_reg;
        icmp_ln9_reg_447_pp0_iter2_reg <= icmp_ln9_reg_447_pp0_iter1_reg;
        icmp_ln9_reg_447_pp0_iter3_reg <= icmp_ln9_reg_447_pp0_iter2_reg;
        icmp_ln9_reg_447_pp0_iter4_reg <= icmp_ln9_reg_447_pp0_iter3_reg;
        icmp_ln9_reg_447_pp0_iter5_reg <= icmp_ln9_reg_447_pp0_iter4_reg;
        icmp_ln9_reg_447_pp0_iter6_reg <= icmp_ln9_reg_447_pp0_iter5_reg;
        icmp_ln9_reg_447_pp0_iter7_reg <= icmp_ln9_reg_447_pp0_iter6_reg;
        icmp_ln9_reg_447_pp0_iter8_reg <= icmp_ln9_reg_447_pp0_iter7_reg;
        icmp_ln9_reg_447_pp0_iter9_reg <= icmp_ln9_reg_447_pp0_iter8_reg;
        zext_ln9_reg_451_pp0_iter10_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter9_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter11_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter10_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter12_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter11_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter13_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter12_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter14_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter13_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter15_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter14_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter16_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter15_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter17_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter16_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter18_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter17_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter19_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter18_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter20_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter19_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter2_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter1_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter3_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter2_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter4_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter3_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter5_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter4_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter6_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter5_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter7_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter6_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter8_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter7_reg[3 : 0];
        zext_ln9_reg_451_pp0_iter9_reg[3 : 0] <= zext_ln9_reg_451_pp0_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_447_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p0_reg_576 <= grp_fu_278_p2;
        p1_reg_581 <= grp_fu_282_p2;
        p2_reg_586 <= grp_fu_286_p2;
        p3_reg_591 <= grp_fu_290_p2;
        p4_reg_596 <= grp_fu_294_p2;
        p5_reg_601 <= grp_fu_298_p2;
        p6_reg_606 <= grp_fu_302_p2;
        p7_reg_611 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_447_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum0_a_reg_616 <= grp_fu_250_p2;
        sum1_a_reg_621 <= grp_fu_254_p2;
        sum2_a_reg_626 <= grp_fu_258_p2;
        sum3_a_reg_631 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_447_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum0_b_reg_636 <= grp_fu_266_p2;
        sum1_b_reg_641 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_fu_348_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln9_reg_451[3 : 0] <= zext_ln9_fu_354_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_0_ce0 = 1'b1;
    end else begin
        M_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_1_ce0 = 1'b1;
    end else begin
        M_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_2_ce0 = 1'b1;
    end else begin
        M_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_3_ce0 = 1'b1;
    end else begin
        M_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_4_ce0 = 1'b1;
    end else begin
        M_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_5_ce0 = 1'b1;
    end else begin
        M_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_6_ce0 = 1'b1;
    end else begin
        M_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        M_7_ce0 = 1'b1;
    end else begin
        M_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (icmp_ln9_reg_447_pp0_iter20_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_348_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln9_fu_348_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter21 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter21 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln9_fu_348_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_address0 = zext_ln9_fu_354_p1;

assign M_1_address0 = zext_ln9_fu_354_p1;

assign M_2_address0 = zext_ln9_fu_354_p1;

assign M_3_address0 = zext_ln9_fu_354_p1;

assign M_4_address0 = zext_ln9_fu_354_p1;

assign M_5_address0 = zext_ln9_fu_354_p1;

assign M_6_address0 = zext_ln9_fu_354_p1;

assign M_7_address0 = zext_ln9_fu_354_p1;

assign V_Out_address0 = zext_ln9_reg_451_pp0_iter20_reg;

assign V_Out_d0 = add_reg_646;

assign add_ln9_fu_342_p2 = (i_reg_239 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_10_fu_330_p1 = V_In_5;

assign empty_11_fu_334_p1 = V_In_6;

assign empty_12_fu_338_p1 = V_In_7;

assign empty_6_fu_314_p1 = V_In_1;

assign empty_7_fu_318_p1 = V_In_2;

assign empty_8_fu_322_p1 = V_In_3;

assign empty_9_fu_326_p1 = V_In_4;

assign empty_fu_310_p1 = V_In_0;

assign grp_fu_278_p1 = M_0_load_reg_496;

assign grp_fu_282_p1 = M_1_load_reg_501;

assign grp_fu_286_p1 = M_2_load_reg_506;

assign grp_fu_290_p1 = M_3_load_reg_511;

assign grp_fu_294_p1 = M_4_load_reg_516;

assign grp_fu_298_p1 = M_5_load_reg_521;

assign grp_fu_302_p1 = M_6_load_reg_526;

assign grp_fu_306_p1 = M_7_load_reg_531;

assign icmp_ln9_fu_348_p2 = ((i_reg_239 == 4'd8) ? 1'b1 : 1'b0);

assign zext_ln9_fu_354_p1 = i_reg_239;

always @ (posedge ap_clk) begin
    zext_ln9_reg_451[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter16_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter17_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter18_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter19_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln9_reg_451_pp0_iter20_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_vector
