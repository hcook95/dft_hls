// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_vector_matrix_vector,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.210000,HLS_SYN_LAT=265,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=744,HLS_SYN_LUT=1114,HLS_VERSION=2020_2}" *)

module matrix_vector (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_0_address0,
        M_0_ce0,
        M_0_q0,
        M_1_address0,
        M_1_ce0,
        M_1_q0,
        V_In_0_address0,
        V_In_0_ce0,
        V_In_0_q0,
        V_In_1_address0,
        V_In_1_ce0,
        V_In_1_q0,
        V_Out_address0,
        V_Out_ce0,
        V_Out_we0,
        V_Out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state14 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] M_0_address0;
output   M_0_ce0;
input  [31:0] M_0_q0;
output  [4:0] M_1_address0;
output   M_1_ce0;
input  [31:0] M_1_q0;
output  [1:0] V_In_0_address0;
output   V_In_0_ce0;
input  [31:0] V_In_0_q0;
output  [1:0] V_In_1_address0;
output   V_In_1_ce0;
input  [31:0] V_In_1_q0;
output  [2:0] V_Out_address0;
output   V_Out_ce0;
output   V_Out_we0;
output  [31:0] V_Out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg M_0_ce0;
reg M_1_ce0;
reg V_In_0_ce0;
reg V_In_1_ce0;
reg V_Out_ce0;
reg V_Out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_127;
reg   [3:0] i_reg_139;
reg   [3:0] j_reg_150;
reg   [31:0] sum_reg_161;
wire   [0:0] icmp_ln8_fu_180_p2;
reg   [0:0] icmp_ln8_reg_304;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_304_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_304_pp0_iter2_reg;
wire   [0:0] icmp_ln12_fu_192_p2;
reg   [0:0] icmp_ln12_reg_308;
reg   [0:0] icmp_ln12_reg_308_pp0_iter1_reg;
wire   [3:0] select_ln8_2_fu_206_p3;
reg   [3:0] select_ln8_2_reg_313;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] select_ln8_2_reg_313_pp0_iter1_reg;
reg   [3:0] select_ln8_2_reg_313_pp0_iter2_reg;
wire   [0:0] trunc_ln12_fu_214_p1;
reg   [0:0] trunc_ln12_reg_319;
wire   [3:0] add_ln12_fu_248_p2;
reg   [3:0] add_ln12_reg_345;
wire   [0:0] icmp_ln12_1_fu_254_p2;
reg   [0:0] icmp_ln12_1_reg_350;
reg   [0:0] icmp_ln12_1_reg_350_pp0_iter1_reg;
reg   [0:0] icmp_ln12_1_reg_350_pp0_iter2_reg;
wire   [31:0] select_ln14_fu_260_p3;
reg   [31:0] select_ln14_reg_354;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln14_1_fu_267_p3;
reg   [31:0] select_ln14_1_reg_359;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [6:0] add_ln8_1_fu_282_p2;
reg   [6:0] add_ln8_1_reg_374;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_state13_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] mul_reg_379;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] sum_1_reg_389;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter1_state8;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_131_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i_phi_fu_143_p4;
reg   [3:0] ap_phi_mux_j_phi_fu_154_p4;
reg   [31:0] ap_phi_mux_sum_phi_fu_165_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln14_1_fu_242_p1;
wire   [63:0] zext_ln14_fu_228_p1;
wire   [63:0] zext_ln8_fu_296_p1;
wire    ap_block_pp0_stage3;
wire   [31:0] grp_fu_172_p0;
wire   [31:0] grp_fu_176_p0;
wire   [31:0] grp_fu_176_p1;
wire   [3:0] add_ln8_fu_186_p2;
wire   [3:0] select_ln8_fu_198_p3;
wire   [1:0] lshr_ln_fu_218_p4;
wire   [5:0] tmp_fu_234_p3;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrix_vector_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .din1(mul_reg_379),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

matrix_vector_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(grp_fu_176_p1),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter1_state8))) begin
                ap_enable_reg_pp0_iter1 <= 1'b0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state8) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_139 <= select_ln8_2_reg_313;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_139 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_127 <= add_ln8_1_reg_374;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_127 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_150 <= add_ln12_reg_345;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_304_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_reg_161 <= grp_fu_172_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_reg_161 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln12_reg_345 <= add_ln12_fu_248_p2;
        select_ln8_2_reg_313 <= select_ln8_2_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln8_1_reg_374 <= add_ln8_1_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_1_reg_350 <= icmp_ln12_1_fu_254_p2;
        icmp_ln12_reg_308 <= icmp_ln12_fu_192_p2;
        trunc_ln12_reg_319 <= trunc_ln12_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_1_reg_350_pp0_iter1_reg <= icmp_ln12_1_reg_350;
        icmp_ln12_1_reg_350_pp0_iter2_reg <= icmp_ln12_1_reg_350_pp0_iter1_reg;
        icmp_ln12_reg_308_pp0_iter1_reg <= icmp_ln12_reg_308;
        icmp_ln8_reg_304 <= icmp_ln8_fu_180_p2;
        icmp_ln8_reg_304_pp0_iter1_reg <= icmp_ln8_reg_304;
        icmp_ln8_reg_304_pp0_iter2_reg <= icmp_ln8_reg_304_pp0_iter1_reg;
        select_ln8_2_reg_313_pp0_iter1_reg <= select_ln8_2_reg_313;
        select_ln8_2_reg_313_pp0_iter2_reg <= select_ln8_2_reg_313_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_304_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_reg_379 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln14_1_reg_359 <= select_ln14_1_fu_267_p3;
        select_ln14_reg_354 <= select_ln14_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_304_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_1_reg_389 <= grp_fu_172_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_0_ce0 = 1'b1;
    end else begin
        M_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_1_ce0 = 1'b1;
    end else begin
        M_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        V_In_0_ce0 = 1'b1;
    end else begin
        V_In_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        V_In_1_ce0 = 1'b1;
    end else begin
        V_In_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        V_Out_ce0 = 1'b1;
    end else begin
        V_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln12_1_reg_350_pp0_iter2_reg == 1'd1))) begin
        V_Out_we0 = 1'b1;
    end else begin
        V_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln8_reg_304 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_143_p4 = select_ln8_2_reg_313;
    end else begin
        ap_phi_mux_i_phi_fu_143_p4 = i_reg_139;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_131_p4 = add_ln8_1_reg_374;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_131_p4 = indvar_flatten_reg_127;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_154_p4 = add_ln12_reg_345;
    end else begin
        ap_phi_mux_j_phi_fu_154_p4 = j_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_304_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_sum_phi_fu_165_p4 = grp_fu_172_p2;
    end else begin
        ap_phi_mux_sum_phi_fu_165_p4 = sum_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state8) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state8) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_0_address0 = zext_ln14_1_fu_242_p1;

assign M_1_address0 = zext_ln14_1_fu_242_p1;

assign V_In_0_address0 = zext_ln14_fu_228_p1;

assign V_In_1_address0 = zext_ln14_fu_228_p1;

assign V_Out_address0 = zext_ln8_fu_296_p1;

assign V_Out_d0 = sum_1_reg_389;

assign add_ln12_fu_248_p2 = (select_ln8_fu_198_p3 + 4'd1);

assign add_ln8_1_fu_282_p2 = (indvar_flatten_reg_127 + 7'd1);

assign add_ln8_fu_186_p2 = (ap_phi_mux_i_phi_fu_143_p4 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_172_p0 = ((icmp_ln12_reg_308_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_sum_phi_fu_165_p4);

assign grp_fu_176_p0 = select_ln14_reg_354;

assign grp_fu_176_p1 = select_ln14_1_reg_359;

assign icmp_ln12_1_fu_254_p2 = ((add_ln12_fu_248_p2 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_192_p2 = ((ap_phi_mux_j_phi_fu_154_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_180_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_131_p4 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln_fu_218_p4 = {{select_ln8_fu_198_p3[2:1]}};

assign select_ln14_1_fu_267_p3 = ((trunc_ln12_reg_319[0:0] == 1'b1) ? M_1_q0 : M_0_q0);

assign select_ln14_fu_260_p3 = ((trunc_ln12_reg_319[0:0] == 1'b1) ? V_In_1_q0 : V_In_0_q0);

assign select_ln8_2_fu_206_p3 = ((icmp_ln12_fu_192_p2[0:0] == 1'b1) ? add_ln8_fu_186_p2 : ap_phi_mux_i_phi_fu_143_p4);

assign select_ln8_fu_198_p3 = ((icmp_ln12_fu_192_p2[0:0] == 1'b1) ? 4'd0 : ap_phi_mux_j_phi_fu_154_p4);

assign tmp_fu_234_p3 = {{select_ln8_2_fu_206_p3}, {lshr_ln_fu_218_p4}};

assign trunc_ln12_fu_214_p1 = select_ln8_fu_198_p3[0:0];

assign zext_ln14_1_fu_242_p1 = tmp_fu_234_p3;

assign zext_ln14_fu_228_p1 = lshr_ln_fu_218_p4;

assign zext_ln8_fu_296_p1 = select_ln8_2_reg_313_pp0_iter2_reg;

endmodule //matrix_vector
